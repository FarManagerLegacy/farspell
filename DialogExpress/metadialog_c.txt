metaquote %[]
target C
begin
%[foreach dialog]
/******************************************************************************
 %[dialog.id]
 ******************************************************************************/
#define %[prefix]%[dialog.cid]_Width %[dialog.width]
#define %[prefix]%[dialog.cid]_Height %[dialog.height]
#define %[prefix]%[dialog.cid]_NItems %[items.count]
#define %[prefix]%[dialog.cid]_HelpTopic "%[dialog.helptopic]"
void %[prefix]Fill%[dialog.cid](const struct PluginStartupInfo *pInfo, /*in,out*/ struct FarDialogItem* pItems)
{
#ifdef far_assert
  far_assert(pItems);
#else
#ifdef assert
  assert(pItems);
#endif
#endif
  memset(pItems, 0, %[prefix]%[dialog.cid]_NItems*sizeof(struct FarDialogItem));
%[foreach item]
%[has id?]
  /* Item ID %[sid] (%[id]) Index %[index] */
%[hasn't id?]
  /* Item Index %[index] */
%[other]
  pItems->Type = %[type];
%[has x1?]
  pItems->X1 = %[x1];
%[has y1?]
  pItems->Y1 = %[y1];
%[has x2?]
  pItems->X2 = %[x2];
%[has y2?]
  pItems->Y2 = %[y2];
%[has focused?]
  pItems->Focus = %[focused];
%[has selected?]
  pItems->Selected = %[selected];
%[has flags?]
  pItems->Flags = %[flags];
%[has msgid?]
  strcpy(pItems->Data, pInfo->GetMsg(pInfo->ModuleNumber, %[msgid]));
%[has text?]
  strcpy(pItems->Data, "%[text]");
%[has history?]
  pItems->History = "%[history]";
%[common]
  pItems++;
%[next item]
}

int __inline %[prefix]%[dialog.cid]Index(int nId)
{
  switch(nId)
  {
%[foreach item]
%[has id?]
    case %[id]: return %[index];
%[next item]
  }
  return nId;
}

int __inline %[prefix]%[dialog.cid]Id(int nIndex)
{
  switch(nIndex)
  {
%[foreach item]
    case %[index]: return %[id];
%[next item]
  }
  return nIndex;
}

%[foreach item]
%[has id?]
#define %[prefix]%[dialog.cid]Index_%[cid] %[index]
%[next item]

%[foreach item]
#define %[prefix]%[dialog.cid]Id_%[index] %[id]
%[next item]
%[next dialog]

