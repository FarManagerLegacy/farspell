metaquote %[]
target C++
begin
%[foreach dialog]
/******************************************************************************
 %[dialog.id]
 ******************************************************************************/
class %[prefix]%[dialog.id]
: public Far
{
  public:
    enum {
      Width = %[dialog.width], Height = %[dialog.height], 
      NItems = %[items.count],
    };
    static const char* HelpTopic;
    static void FillItems(const PluginStartupInfo *pInfo, FarDialogItem* pItems)
    {
#ifdef far_assert
      far_assert(pItems);
#else
#ifdef assert
      assert(pItems);
#endif
#endif
      memset(pItems, 0, NItems*sizeof(FarDialogItem));
%[foreach item]
%[has id?]
      /* Item ID %[sid] (%[id]) Index %[index] */
%[hasn't id?]
      /* Item Index %[index] */
%[other]
      pItems->Type = %[type];
%[has x1?]
      pItems->X1 = %[x1];
%[has y1?]
      pItems->Y1 = %[y1];
%[has x2?]
      pItems->X2 = %[x2];
%[has y2?]
      pItems->Y2 = %[y2];
%[has focused?]
      pItems->Focus = %[focused];
%[has selected?]
      pItems->Selected = %[selected];
%[has flags?]
      pItems->Flags = %[flags];
%[has msgid?]
      strcpy(pItems->Data, pInfo->GetMsg(pInfo->ModuleNumber, %[smsgid]));
%[has text?]
      strcpy(pItems->Data, "%[text]");
%[has history?]
      pItems->History = "%[history]";
%[has foreground.index?]
      pItems->Flags |= 0x0F&pInfo->AdvControl(pInfo->ModuleNumber, ACTL_GETCOLOR, 
                         (void*)%[foreground.index])
                    | DIF_SETCOLOR;
%[has background.index?]
      pItems->Flags |= 0xF0&pInfo->AdvControl(pInfo->ModuleNumber, ACTL_GETCOLOR, 
                         (void*)%[background.index])
                    | DIF_SETCOLOR;
%[has color.index?]
      pItems->Flags |= pInfo->AdvControl(pInfo->ModuleNumber, ACTL_GETCOLOR, 
                         (void*)%[color.index])
                    | DIF_SETCOLOR;
%[common]
      pItems++;
%[next item]
    }
    enum {
%[foreach item]
      Id_%[index] = %[id],
%[has id?]
      Index_%[cid] = %[index],
%[next item]
    };
    static int ItemIndex(int nId) {
      switch(nId) {
%[foreach item]
%[has id?]
        case %[id]: return %[index];
%[next item]
      }
      return nId;
    }
    static int ItemId(int nIndex) {
      switch(nIndex) {
%[foreach item]
        case %[index]: return %[id];
%[next item]
      }
      return nIndex;
    }
  public:
    FarDialogItem sItems[NItems];
    %[prefix]%[dialog.id]() {
      RefillItems();
    }
    void RefillItems() {
      FillItems(&m_Info, sItems);
    }
    int ShowEx(DWORD Flags, FARWINDOWPROC DlgProc, long Param)
    {
      return Far::DialogEx(-1, -1, Width, Height, HelpTopic, 
           sItems, NItems, Flags, 0, DlgProc, Param);
    }
    int ShowEx(int X1, int Y1, DWORD Flags, FARWINDOWPROC DlgProc, long Param)
    {
      return Far::DialogEx(X1, Y1, 
           (X1!=-1) ? X1+Width-1 : Width, 
           (Y1!=-1) ? Y1+Height-1 : Height, 
           HelpTopic, sItems, NItems, Flags, 0, DlgProc, Param);
    }
    int Show(DWORD Flags)
    {
      return Far::DialogEx(-1, -1, Width, Height, HelpTopic, 
           sItems, NItems, Flags, 0, Far::DefDlgProc, 0);
    }
};
const char* %[prefix]%[dialog.id]::HelpTopic = "%[dialog.helptopic]";
// end of %[dialog.id]
%[next dialog]
